name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: DBPass
          POSTGRES_DB: wd-todo-prod
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "21.7.1"

      - name: Install dependencies
        run: cd todo-app && npm install

      - name: Run unit tests
        run: cd todo-app && npm test

      - name: Run the app
        id: run-app
        run: |
          cd todo-app
          npm install
          NODE_ENV=test
          PORT=3000 npm run clean:start &
          SERVER_PID=$! 
          sleep 5

      - name: Run integration tests
        run: |
          cd todo-app
          npm install cypress cypress-json-results
          npx cypress run --env STUDENT_SUBMISSION_URL="http://localhost:3000/"
          kill $SERVER_PID

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Set environment variables
        run: |
          echo "DEV_USERNAME=${{ secrets.DEV_USERNAME }}" >> $GITHUB_ENV
          echo "DEV_PASSWORD=${{ secrets.DEV_PASSWORD }}" >> $GITHUB_ENV
          echo "DEV_DATABASE=${{ secrets.DEV_DATABASE }}" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build -t todo-app:dev .

      - name: Run Docker Compose up
        run: docker-compose -f docker-compose-prod.yml up -d

      - name: Wait for Docker containers to start
        run: sleep 10

      - name: Tag and Push App Docker Image
        run: |
          docker tag todo-app:prod ${{ secrets.DOCKER_USERNAME }}/todo-app:prod
          docker push ${{ secrets.DOCKER_USERNAME }}/todo-app:prod

      - name: Tag and Push Database Docker Image
        run: |
          docker tag postgres:15 ${{ secrets.DOCKER_USERNAME }}/postgres:15
          docker push ${{ secrets.DOCKER_USERNAME }}/postgres:15

      - name: Set up Azure credentials
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: |
          az aks get-credentials --resource-group myResourceGroup --name myAKSCluster

      - name: Deploy to AKS
        run: kubectl apply -f k8s/deployment.yaml

      - name: Notify on Discord
        run: |
          STATUS="success"
          if [ "${{ job.status }}" != "success" ]; then STATUS="failure"; fi
          PAYLOAD=$(jq -n \
            --arg status "$STATUS" \
            --arg repository "${{ github.repository }}" \
            --arg ref "${{ github.ref }}" \
            --arg run_id "${{ github.run_id }}" \
            --arg workflow "${{ github.workflow }}" \
            --arg sha "${{ github.sha }}" \
            --arg actor "${{ github.actor }}" \
            --arg run_number "${{ github.run_number }}" \
            --arg url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            '{
              content: "Deployment status for \($repository) on branch \($ref): **\($status)**\nJob ID: \($run_id)\nWorkflow: \($workflow)\nCommit: \($sha)\nActor: \($actor)\nRun Number: \($run_number)\nURL: \($url)"
            }')
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "$PAYLOAD" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
